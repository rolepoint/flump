from flask import request, jsonify
from werkzeug.exceptions import NotFound

from ..exceptions import FlumpUnprocessableEntity
from ..schemas import ResponseData, make_entity_schema, make_data_schema


class Patch:
    @property
    def _patch_schema(self):
        """
        Builds a schema for PATCH requests. Specifies the resource_schema as
        being `partial`, i.e it will ignore missing fields during
        deserialization.
        """
        fields = request.json['data']['attributes'].keys()
        return make_entity_schema(
            self.resource_schema, self.resource_name,
            make_data_schema(
                self.resource_schema, id_required=True,
                only=fields, partial=True
            )
        )

    @property
    def patch_data(self):
        """
        Property so we can override in derived classes to include autogenerated
        attributes such as api_keys.
        """
        return request.json

    def update_entity(self, existing_entity, data):
        """
        Should update an entity from the given data.

        :param existing_entity: The instance returned from
                                :func:`.view.FlumpView.get_entity`
        :param data: The deserialized data dict.
        :returns: The updated entity.
        """
        raise NotImplementedError

    def patch(self, entity_id, **kwargs):
        """
        Handles HTTP PATCH requests.

        Updates an entity based on the current schema and request json. The
        view should provide a method for updating the entity using
        :func:`Patch.update_entity`.

        :param entity_id: The entity_id used to retrieve the entity using
                          :func:`flump.view.FlumpView.get_entity`
        :param \**kwargs: Any other kwargs taken from the url which are used
                          for identifying the entity to patch.
        """
        entity = self.get_entity(entity_id, **kwargs)
        if not entity:
            raise NotFound
        self._verify_etag(entity)

        entity_data, errors = self._patch_schema().load(self.patch_data)
        if errors:
            raise FlumpUnprocessableEntity(errors=errors)

        entity = self.update_entity(entity, entity_data.attributes)

        response_data = ResponseData(entity_data._replace(attributes=entity),
                                     {'self': request.url})

        data, _ = self.response_schema(strict=True).dump(response_data)
        response = jsonify(data)
        response.set_etag(str(entity.etag))
        return response, 200
