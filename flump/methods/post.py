from flask import request, jsonify
from werkzeug.exceptions import Forbidden


from ..exceptions import FlumpUnprocessableEntity
from ..schemas import ResponseData, make_entity_schema, make_data_schema
from ..web_utils import url_for


class Post:
    @property
    def _post_schema(self):
        """
        A schema describing the format of POST request for jsonapi. Provides
        automatic error checking for the data format.
        """
        return make_entity_schema(self.resource_schema, self.resource_name,
                                  make_data_schema(self.resource_schema))

    @property
    def post_data(self):
        """
        Property so we can override in derived classes to include autogenerated
        attributes such as api_keys.
        """
        return request.json

    def create_entity(self, data):
        """
        Should save an entity from the given data.

        :param data: The deserialized data dict.
        :returns: The newly created entity.
        """
        raise NotImplementedError

    def post(self, **kwargs):
        """
        Handles HTTP POST requests.

        Creates an entity based on the current schema and request json. The
        view should provide a method for creating the entity using
        :func:`Post.create_entity`

        :param \**kwargs: Any kwargs taken from the url which are used
                          for building the url identifying the new entity.
        """
        entity_data, errors = self._post_schema().load(self.post_data)
        if errors:
            raise FlumpUnprocessableEntity(errors=errors)

        if entity_data.id is not None:
            raise Forbidden(
                'You must not specify an id when creating an entity'
            )

        entity_data = entity_data._replace(
            attributes=self.create_entity(entity_data.attributes)
        )

        url = url_for('.{}'.format(self.resource_name), _external=True,
                      entity_id=entity_data.attributes.id, _method='GET',
                      **kwargs)
        schema = self.response_schema(strict=True)
        response_data = ResponseData(entity_data, {'self': url})
        data, _ = schema.dump(response_data)

        response = jsonify(data)
        response.headers['Location'] = url
        response.set_etag(str(entity_data.attributes.etag))
        return response, 201
