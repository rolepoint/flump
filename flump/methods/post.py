from flask import request, jsonify

from ..exceptions import FlumpUnprocessableEntity
from ..schemas import ResponseData
from ..web_utils import url_for


class Post:
    @property
    def post_data(self):
        """
        Property so we can override in derived classes to include autogenerated
        attributes such as api_keys.
        """
        return request.json

    def post(self, **kwargs):
        """
        Creates an entity based on the current schema and request json. The
        schema should provide a method for creating the entity using the
        `create_entity` function.
        """
        entity_data, errors = self.post_schema().load(self.post_data)
        if errors:
            raise FlumpUnprocessableEntity(errors=errors)

        url = url_for('.{}'.format(self.resource_name), _external=True,
                      entity_id=entity_data.attributes.id, _method='GET',
                      **kwargs)
        data, _ = self.response_schema(strict=True).dump(
            ResponseData(entity_data, {'self': url})
        )

        response = jsonify(data)
        response.headers['Location'] = url
        response.headers['Etag'] = entity_data.attributes.etag
        return response, 201
